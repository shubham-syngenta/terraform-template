# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  slack: circleci/slack@4.1.3
  aws-cli: circleci/aws-cli@1.2.1

executors:
  docker-executor:
    docker:
      - image: circleci/node:latest
    environment:
      ## If prod, make sure you're enabling correct acm file
      ENV: "dev"
      PROJECT: ${{values.name}}

# Anchors & aliases can be used to duplicate/inherit properties
defaults: &defaults
  executor: docker-executor
  working_directory: ~/cdframework

commands:
  aws-profiles:
      steps:
        - run:
            name: aws setup
            command: |
              npx @syngenta-digital/acp --file /home/circleci/cdframework/aws/profiles.yml
              aws sts get-caller-identity
              cat ~/.aws/config
              printenv
  install-aws-auth:
    steps:
      - run: 
          name: Install aws-auth
          command: |
            curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.19.6/2021-01-05/bin/linux/amd64/aws-iam-authenticator
            chmod +x ./aws-iam-authenticator
            mkdir -p $HOME/bin && cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator && export PATH=$PATH:$HOME/bin
            echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
            aws-iam-authenticator help
  install-terrafrom:
    steps:
      - run: 
          name: Install terraform
          command: |
            mkdir ~/bin
            wget https://releases.hashicorp.com/terraform/0.14.6/terraform_0.14.6_linux_amd64.zip
            unzip terraform_0.14.6_linux_amd64.zip
            mv terraform ~/bin
      - run:    
          name: Install kubectl
          command: |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x ./kubectl
            mv ./kubectl ~/bin
            kubectl version --client
  generate-terraform-profile:
    steps: 
      - run: 
          name: generate terraform profile
          command: |
            declare -A accountID=([dev]=${{values.dev}} [qa]=${{values.qa}}  [stage]=${{values.stage}}  [prod]=${{values.prod}} )     
            sh ./scripts/generateprovider.sh CICD ${accountID[$ENV]} eu-central-1 $ENV $PROJECT
            cat ./provider.tf
            

jobs:      
  tfplan:
    <<: *defaults    
    steps:
      - attach_workspace:
          at: ~/cdframework
      - checkout
      - aws-cli/setup
      - aws-profiles
      - install-terrafrom
      - generate-terraform-profile
      - run: aws eks --region eu-central-1 update-kubeconfig --name spray-assist-$ENV --profile $ENV || true
      # - run: aws iam create-service-linked-role --aws-service-name spot.amazonaws.com --profile $ENV || true
      - run:
          name: terraform init & plan & apply
          command: |
            
            export  TF_VAR_datadog_apikey=$DATADOG_API_KEY
            export  TF_VAR_datadog_appkey=$DATADOG_APP_KEY
            
            aws sts get-caller-identity
            ls -la
            
            terraform init
            # terraform state list
            terraform plan -var-file="${ENV}.tfvars" -out tfapply
            
            # terraform apply -auto-approve tfapply

      # - persist_to_workspace:
      #     root: .
      #     paths:
      #       - .
    
approve-tf-apply-deploy:

workflows:
  build-and-deploy:
    jobs:
      - tfplan:
          context: 
            - cropwise-spray-assist-cicd
            - shared-datadog-token
          filters:
            branches:
              only:
                - main